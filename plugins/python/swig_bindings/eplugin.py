# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _eplugin
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


E_PLUGIN_CLASSID = _eplugin.E_PLUGIN_CLASSID
class _EPluginAuthor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginAuthor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginAuthor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _eplugin._EPluginAuthor_name_set
    __swig_getmethods__["name"] = _eplugin._EPluginAuthor_name_get
    if _newclass:name = _swig_property(_eplugin._EPluginAuthor_name_get, _eplugin._EPluginAuthor_name_set)
    __swig_setmethods__["email"] = _eplugin._EPluginAuthor_email_set
    __swig_getmethods__["email"] = _eplugin._EPluginAuthor_email_get
    if _newclass:email = _swig_property(_eplugin._EPluginAuthor_email_get, _eplugin._EPluginAuthor_email_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginAuthor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginAuthor
    __del__ = lambda self : None;
_EPluginAuthor_swigregister = _eplugin._EPluginAuthor_swigregister
_EPluginAuthor_swigregister(_EPluginAuthor)

class _EPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPlugin, name)
    __repr__ = _swig_repr
    __swig_setmethods__["object"] = _eplugin._EPlugin_object_set
    __swig_getmethods__["object"] = _eplugin._EPlugin_object_get
    if _newclass:object = _swig_property(_eplugin._EPlugin_object_get, _eplugin._EPlugin_object_set)
    __swig_setmethods__["id"] = _eplugin._EPlugin_id_set
    __swig_getmethods__["id"] = _eplugin._EPlugin_id_get
    if _newclass:id = _swig_property(_eplugin._EPlugin_id_get, _eplugin._EPlugin_id_set)
    __swig_setmethods__["path"] = _eplugin._EPlugin_path_set
    __swig_getmethods__["path"] = _eplugin._EPlugin_path_get
    if _newclass:path = _swig_property(_eplugin._EPlugin_path_get, _eplugin._EPlugin_path_set)
    __swig_setmethods__["hooks_pending"] = _eplugin._EPlugin_hooks_pending_set
    __swig_getmethods__["hooks_pending"] = _eplugin._EPlugin_hooks_pending_get
    if _newclass:hooks_pending = _swig_property(_eplugin._EPlugin_hooks_pending_get, _eplugin._EPlugin_hooks_pending_set)
    __swig_setmethods__["description"] = _eplugin._EPlugin_description_set
    __swig_getmethods__["description"] = _eplugin._EPlugin_description_get
    if _newclass:description = _swig_property(_eplugin._EPlugin_description_get, _eplugin._EPlugin_description_set)
    __swig_setmethods__["name"] = _eplugin._EPlugin_name_set
    __swig_getmethods__["name"] = _eplugin._EPlugin_name_get
    if _newclass:name = _swig_property(_eplugin._EPlugin_name_get, _eplugin._EPlugin_name_set)
    __swig_setmethods__["domain"] = _eplugin._EPlugin_domain_set
    __swig_getmethods__["domain"] = _eplugin._EPlugin_domain_get
    if _newclass:domain = _swig_property(_eplugin._EPlugin_domain_get, _eplugin._EPlugin_domain_set)
    __swig_setmethods__["hooks"] = _eplugin._EPlugin_hooks_set
    __swig_getmethods__["hooks"] = _eplugin._EPlugin_hooks_get
    if _newclass:hooks = _swig_property(_eplugin._EPlugin_hooks_get, _eplugin._EPlugin_hooks_set)
    __swig_setmethods__["authors"] = _eplugin._EPlugin_authors_set
    __swig_getmethods__["authors"] = _eplugin._EPlugin_authors_get
    if _newclass:authors = _swig_property(_eplugin._EPlugin_authors_get, _eplugin._EPlugin_authors_set)
    __swig_setmethods__["flags"] = _eplugin._EPlugin_flags_set
    __swig_getmethods__["flags"] = _eplugin._EPlugin_flags_get
    if _newclass:flags = _swig_property(_eplugin._EPlugin_flags_get, _eplugin._EPlugin_flags_set)
    __swig_setmethods__["enabled"] = _eplugin._EPlugin_enabled_set
    __swig_getmethods__["enabled"] = _eplugin._EPlugin_enabled_get
    if _newclass:enabled = _swig_property(_eplugin._EPlugin_enabled_get, _eplugin._EPlugin_enabled_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPlugin
    __del__ = lambda self : None;
_EPlugin_swigregister = _eplugin._EPlugin_swigregister
_EPlugin_swigregister(_EPlugin)

class _EPluginClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["class"] = _eplugin._EPluginClass_class_set
    __swig_getmethods__["class"] = _eplugin._EPluginClass_class_get
    if _newclass:class = _swig_property(_eplugin._EPluginClass_class_get, _eplugin._EPluginClass_class_set)
    __swig_setmethods__["type"] = _eplugin._EPluginClass_type_set
    __swig_getmethods__["type"] = _eplugin._EPluginClass_type_get
    if _newclass:type = _swig_property(_eplugin._EPluginClass_type_get, _eplugin._EPluginClass_type_set)
    __swig_setmethods__["construct"] = _eplugin._EPluginClass_construct_set
    __swig_getmethods__["construct"] = _eplugin._EPluginClass_construct_get
    if _newclass:construct = _swig_property(_eplugin._EPluginClass_construct_get, _eplugin._EPluginClass_construct_set)
    __swig_setmethods__["invoke"] = _eplugin._EPluginClass_invoke_set
    __swig_getmethods__["invoke"] = _eplugin._EPluginClass_invoke_get
    if _newclass:invoke = _swig_property(_eplugin._EPluginClass_invoke_get, _eplugin._EPluginClass_invoke_set)
    __swig_setmethods__["enable"] = _eplugin._EPluginClass_enable_set
    __swig_getmethods__["enable"] = _eplugin._EPluginClass_enable_get
    if _newclass:enable = _swig_property(_eplugin._EPluginClass_enable_get, _eplugin._EPluginClass_enable_set)
    __swig_setmethods__["get_configure_widget"] = _eplugin._EPluginClass_get_configure_widget_set
    __swig_getmethods__["get_configure_widget"] = _eplugin._EPluginClass_get_configure_widget_get
    if _newclass:get_configure_widget = _swig_property(_eplugin._EPluginClass_get_configure_widget_get, _eplugin._EPluginClass_get_configure_widget_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginClass
    __del__ = lambda self : None;
_EPluginClass_swigregister = _eplugin._EPluginClass_swigregister
_EPluginClass_swigregister(_EPluginClass)

e_plugin_get_type = _eplugin.e_plugin_get_type
e_plugin_construct = _eplugin.e_plugin_construct
e_plugin_add_load_path = _eplugin.e_plugin_add_load_path
e_plugin_load_plugins = _eplugin.e_plugin_load_plugins
e_plugin_list_plugins = _eplugin.e_plugin_list_plugins
e_plugin_register_type = _eplugin.e_plugin_register_type
e_plugin_invoke = _eplugin.e_plugin_invoke
e_plugin_enable = _eplugin.e_plugin_enable
e_plugin_get_configure_widget = _eplugin.e_plugin_get_configure_widget
e_plugin_xml_prop = _eplugin.e_plugin_xml_prop
e_plugin_xml_prop_domain = _eplugin.e_plugin_xml_prop_domain
e_plugin_xml_int = _eplugin.e_plugin_xml_int
e_plugin_xml_content = _eplugin.e_plugin_xml_content
e_plugin_xml_content_domain = _eplugin.e_plugin_xml_content_domain
class _EPluginLib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginLib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginLib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plugin"] = _eplugin._EPluginLib_plugin_set
    __swig_getmethods__["plugin"] = _eplugin._EPluginLib_plugin_get
    if _newclass:plugin = _swig_property(_eplugin._EPluginLib_plugin_get, _eplugin._EPluginLib_plugin_set)
    __swig_setmethods__["location"] = _eplugin._EPluginLib_location_set
    __swig_getmethods__["location"] = _eplugin._EPluginLib_location_get
    if _newclass:location = _swig_property(_eplugin._EPluginLib_location_get, _eplugin._EPluginLib_location_set)
    __swig_setmethods__["module"] = _eplugin._EPluginLib_module_set
    __swig_getmethods__["module"] = _eplugin._EPluginLib_module_get
    if _newclass:module = _swig_property(_eplugin._EPluginLib_module_get, _eplugin._EPluginLib_module_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginLib(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginLib
    __del__ = lambda self : None;
_EPluginLib_swigregister = _eplugin._EPluginLib_swigregister
_EPluginLib_swigregister(_EPluginLib)

class _EPluginLibClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginLibClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginLibClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plugin_class"] = _eplugin._EPluginLibClass_plugin_class_set
    __swig_getmethods__["plugin_class"] = _eplugin._EPluginLibClass_plugin_class_get
    if _newclass:plugin_class = _swig_property(_eplugin._EPluginLibClass_plugin_class_get, _eplugin._EPluginLibClass_plugin_class_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginLibClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginLibClass
    __del__ = lambda self : None;
_EPluginLibClass_swigregister = _eplugin._EPluginLibClass_swigregister
_EPluginLibClass_swigregister(_EPluginLibClass)

e_plugin_lib_get_type = _eplugin.e_plugin_lib_get_type
class _EPluginHookTargetKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginHookTargetKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginHookTargetKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _eplugin._EPluginHookTargetKey_key_set
    __swig_getmethods__["key"] = _eplugin._EPluginHookTargetKey_key_get
    if _newclass:key = _swig_property(_eplugin._EPluginHookTargetKey_key_get, _eplugin._EPluginHookTargetKey_key_set)
    __swig_setmethods__["value"] = _eplugin._EPluginHookTargetKey_value_set
    __swig_getmethods__["value"] = _eplugin._EPluginHookTargetKey_value_get
    if _newclass:value = _swig_property(_eplugin._EPluginHookTargetKey_value_get, _eplugin._EPluginHookTargetKey_value_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginHookTargetKey(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginHookTargetKey
    __del__ = lambda self : None;
_EPluginHookTargetKey_swigregister = _eplugin._EPluginHookTargetKey_swigregister
_EPluginHookTargetKey_swigregister(_EPluginHookTargetKey)

class _EPluginHookTargetMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginHookTargetMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginHookTargetMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _eplugin._EPluginHookTargetMap_type_set
    __swig_getmethods__["type"] = _eplugin._EPluginHookTargetMap_type_get
    if _newclass:type = _swig_property(_eplugin._EPluginHookTargetMap_type_get, _eplugin._EPluginHookTargetMap_type_set)
    __swig_setmethods__["id"] = _eplugin._EPluginHookTargetMap_id_set
    __swig_getmethods__["id"] = _eplugin._EPluginHookTargetMap_id_get
    if _newclass:id = _swig_property(_eplugin._EPluginHookTargetMap_id_get, _eplugin._EPluginHookTargetMap_id_set)
    __swig_setmethods__["mask_bits"] = _eplugin._EPluginHookTargetMap_mask_bits_set
    __swig_getmethods__["mask_bits"] = _eplugin._EPluginHookTargetMap_mask_bits_get
    if _newclass:mask_bits = _swig_property(_eplugin._EPluginHookTargetMap_mask_bits_get, _eplugin._EPluginHookTargetMap_mask_bits_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginHookTargetMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginHookTargetMap
    __del__ = lambda self : None;
_EPluginHookTargetMap_swigregister = _eplugin._EPluginHookTargetMap_swigregister
_EPluginHookTargetMap_swigregister(_EPluginHookTargetMap)

class _EPluginHook(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginHook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginHook, name)
    __repr__ = _swig_repr
    __swig_setmethods__["object"] = _eplugin._EPluginHook_object_set
    __swig_getmethods__["object"] = _eplugin._EPluginHook_object_get
    if _newclass:object = _swig_property(_eplugin._EPluginHook_object_get, _eplugin._EPluginHook_object_set)
    __swig_setmethods__["plugin"] = _eplugin._EPluginHook_plugin_set
    __swig_getmethods__["plugin"] = _eplugin._EPluginHook_plugin_get
    if _newclass:plugin = _swig_property(_eplugin._EPluginHook_plugin_get, _eplugin._EPluginHook_plugin_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginHook(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginHook
    __del__ = lambda self : None;
_EPluginHook_swigregister = _eplugin._EPluginHook_swigregister
_EPluginHook_swigregister(_EPluginHook)

class _EPluginHookClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginHookClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginHookClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["class"] = _eplugin._EPluginHookClass_class_set
    __swig_getmethods__["class"] = _eplugin._EPluginHookClass_class_get
    if _newclass:class = _swig_property(_eplugin._EPluginHookClass_class_get, _eplugin._EPluginHookClass_class_set)
    __swig_setmethods__["id"] = _eplugin._EPluginHookClass_id_set
    __swig_getmethods__["id"] = _eplugin._EPluginHookClass_id_get
    if _newclass:id = _swig_property(_eplugin._EPluginHookClass_id_get, _eplugin._EPluginHookClass_id_set)
    __swig_setmethods__["construct"] = _eplugin._EPluginHookClass_construct_set
    __swig_getmethods__["construct"] = _eplugin._EPluginHookClass_construct_get
    if _newclass:construct = _swig_property(_eplugin._EPluginHookClass_construct_get, _eplugin._EPluginHookClass_construct_set)
    __swig_setmethods__["enable"] = _eplugin._EPluginHookClass_enable_set
    __swig_getmethods__["enable"] = _eplugin._EPluginHookClass_enable_get
    if _newclass:enable = _swig_property(_eplugin._EPluginHookClass_enable_get, _eplugin._EPluginHookClass_enable_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginHookClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginHookClass
    __del__ = lambda self : None;
_EPluginHookClass_swigregister = _eplugin._EPluginHookClass_swigregister
_EPluginHookClass_swigregister(_EPluginHookClass)

e_plugin_hook_get_type = _eplugin.e_plugin_hook_get_type
e_plugin_hook_register_type = _eplugin.e_plugin_hook_register_type
e_plugin_hook_new = _eplugin.e_plugin_hook_new
e_plugin_hook_enable = _eplugin.e_plugin_hook_enable
e_plugin_hook_mask = _eplugin.e_plugin_hook_mask
e_plugin_hook_id = _eplugin.e_plugin_hook_id
class _EPluginTypeHook(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginTypeHook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginTypeHook, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hook"] = _eplugin._EPluginTypeHook_hook_set
    __swig_getmethods__["hook"] = _eplugin._EPluginTypeHook_hook_get
    if _newclass:hook = _swig_property(_eplugin._EPluginTypeHook_hook_get, _eplugin._EPluginTypeHook_hook_set)
    __swig_setmethods__["get_type"] = _eplugin._EPluginTypeHook_get_type_set
    __swig_getmethods__["get_type"] = _eplugin._EPluginTypeHook_get_type_get
    if _newclass:get_type = _swig_property(_eplugin._EPluginTypeHook_get_type_get, _eplugin._EPluginTypeHook_get_type_set)
    __swig_setmethods__["idle"] = _eplugin._EPluginTypeHook_idle_set
    __swig_getmethods__["idle"] = _eplugin._EPluginTypeHook_idle_get
    if _newclass:idle = _swig_property(_eplugin._EPluginTypeHook_idle_get, _eplugin._EPluginTypeHook_idle_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginTypeHook(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginTypeHook
    __del__ = lambda self : None;
_EPluginTypeHook_swigregister = _eplugin._EPluginTypeHook_swigregister
_EPluginTypeHook_swigregister(_EPluginTypeHook)

class _EPluginTypeHookClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EPluginTypeHookClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EPluginTypeHookClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hook_class"] = _eplugin._EPluginTypeHookClass_hook_class_set
    __swig_getmethods__["hook_class"] = _eplugin._EPluginTypeHookClass_hook_class_get
    if _newclass:hook_class = _swig_property(_eplugin._EPluginTypeHookClass_hook_class_get, _eplugin._EPluginTypeHookClass_hook_class_set)
    def __init__(self, *args): 
        this = _eplugin.new__EPluginTypeHookClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eplugin.delete__EPluginTypeHookClass
    __del__ = lambda self : None;
_EPluginTypeHookClass_swigregister = _eplugin._EPluginTypeHookClass_swigregister
_EPluginTypeHookClass_swigregister(_EPluginTypeHookClass)

e_plugin_type_hook_get_type = _eplugin.e_plugin_type_hook_get_type
E_PLUGIN_FLAGS_SYSTEM_PLUGIN = _eplugin.E_PLUGIN_FLAGS_SYSTEM_PLUGIN


